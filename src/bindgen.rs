/* automatically generated by rust-bindgen 0.70.1 */

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RApplication {
    pub m_isRunning: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of RApplication"][::std::mem::size_of::<RApplication>() - 1usize];
    ["Alignment of RApplication"][::std::mem::align_of::<RApplication>() - 1usize];
    ["Offset of field: RApplication::m_isRunning"]
        [::std::mem::offset_of!(RApplication, m_isRunning) - 0usize];
};
extern "C" {
    #[link_name = "\u{1}?run@RApplication@@QEAAXXZ"]
    pub fn RApplication_run(this: *mut RApplication);
}
extern "C" {
    #[link_name = "\u{1}?procEvents@RApplication@@QEAAXXZ"]
    pub fn RApplication_procEvents(this: *mut RApplication);
}
impl RApplication {
    #[inline]
    pub unsafe fn run(&mut self) {
        RApplication_run(self)
    }
    #[inline]
    pub unsafe fn procEvents(&mut self) {
        RApplication_procEvents(self)
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct RWindow {
    pub m_window: *mut ::std::os::raw::c_void,
    pub m_renderer: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of RWindow"][::std::mem::size_of::<RWindow>() - 16usize];
    ["Alignment of RWindow"][::std::mem::align_of::<RWindow>() - 8usize];
    ["Offset of field: RWindow::m_window"][::std::mem::offset_of!(RWindow, m_window) - 0usize];
    ["Offset of field: RWindow::m_renderer"][::std::mem::offset_of!(RWindow, m_renderer) - 8usize];
};
extern "C" {
    #[link_name = "\u{1}?show@RWindow@@QEAAXXZ"]
    pub fn RWindow_show(this: *mut RWindow);
}
extern "C" {
    #[link_name = "\u{1}?close@RWindow@@QEAAXXZ"]
    pub fn RWindow_close(this: *mut RWindow);
}
extern "C" {
    #[link_name = "\u{1}??1RWindow@@QEAA@XZ"]
    pub fn RWindow_RWindow_destructor(this: *mut RWindow);
}
impl RWindow {
    #[inline]
    pub unsafe fn show(&mut self) {
        RWindow_show(self)
    }
    #[inline]
    pub unsafe fn close(&mut self) {
        RWindow_close(self)
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        RWindow_RWindow_destructor(self)
    }
}
